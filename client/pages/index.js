import Head from "next/head";
import Toolbar from "../components/toolbar";
import ImageUrlBuilder from "@sanity/image-url";
import BlockContent from "@sanity/block-content-to-react";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
export default function Home({ posts }) {
  const router = useRouter();
  const [mappedPosts, setMappedPosts] = useState([]);

  useEffect(() => {
    if (posts.length) {
      const imgBuilder = ImageUrlBuilder({
        projectId: "qc7kts2y",
        dataset: "production",
      });

      setMappedPosts(
        posts.map((post) => {
          return {
            ...post,
            mainImage: imgBuilder.image(post.mainImage).width(500).height(250),
          };
        })
      );
    } else {
      setMappedPosts([]);
    }
  }, [posts]);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toolbar />
      <div>
        {mappedPosts.reverse().length ? (
          mappedPosts.map((post, index) => (
            <div
              onClick={() => router.push(`/posts/${post.slug.current}`)}
              key={index}
            >
              <h1 className="font-semibold text-[24px] m-10 tracking-widest">
                {post.title}
              </h1>
              <img className="" src={post.mainImage} alt="imageURL" />
              <div>
                <BlockContent blocks={post.body} />
              </div>
            </div>
          ))
        ) : (
          <>No posts yet</>
        )}
      </div>
    </div>
  );
}

export async function getServerSideProps(Context) {
  const query = encodeURIComponent(`*[ _type == "post" ]`);

  const url = `https://qc7kts2y.api.sanity.io/v1/data/query/production?query=${query}`;

  const result = await fetch(url).then((res) => res.json());

  if (!result.result || !result.result.length) {
    return {
      props: {
        posts: [],
      },
    };
  } else {
    return {
      props: {
        posts: result.result,
      },
    };
  }
}
